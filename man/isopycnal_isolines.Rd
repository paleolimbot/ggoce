% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-isopycnal.R
\name{isopycnal_isolines}
\alias{isopycnal_isolines}
\title{Generate an 'isolines' object representing isopycnals}
\usage{
isopycnal_isolines(
  salinity,
  temperature,
  trim_freezing = TRUE,
  breaks = pretty,
  n_breaks = 5,
  n_sal = 200,
  n_temp = 200,
  eos = getOption("oceEOS", default = "gsw")
)
}
\arguments{
\item{salinity}{either practical salinity (in which case \code{temperature}
and \code{pressure} must be provided) \emph{or} an \code{oce} object, in
which case \code{salinity}, \code{temperature} (in the ITS-90 scale; see
next item), etc. are inferred from the object.}

\item{temperature}{\emph{in-situ} temperature (\eqn{^\circ}{deg}C), defined
on the ITS-90 scale.  This scale is used by GSW-style calculation (as
requested by setting \code{eos="gsw"}), and is the value contained within
\code{ctd} objects (and probably most other objects created with data
acquired in the past decade or two). Since the UNESCO-style calculation is
based on IPTS-68, the temperature is converted within the present function,
using \code{\link[oce:T68fromT90]{T68fromT90()}}.}

\item{trim_freezing}{Don't draw contours outside the freezing region.}

\item{breaks}{A numeric vector or function used to generate breaks
from objects.}

\item{n_breaks}{Passed to \code{breaks} if \code{breaks} is a function.}

\item{n_sal}{Number of points with which contours should be approximated
on the salinity axis.}

\item{n_temp}{Number of points with which contours should be approximated
on the temperature axis.}

\item{eos}{equation of state, either \code{"unesco"} (references 1 and 2)
or \code{"gsw"} (references 3 and 4).}
}
\value{
An object returned by \code{\link[isoband:isobands]{isoband::isolines()}}. The \code{x} values
of the output refer to \code{salinity} and the \code{y} values of the output
refer to temperature.
}
\description{
Generate an 'isolines' object representing isopycnals
}
\examples{
data(ctd, package = "oce")
isolines <- isopycnal_isolines(ctd[["salinity"]], ctd[["temperature"]])

plot(ctd[["salinity"]], ctd[["temperature"]])
for (line in isolines) {
  lines(line)
}

}
