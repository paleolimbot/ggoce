% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-isopycnal.R
\name{isopycnal_isolines}
\alias{isopycnal_isolines}
\title{Generate an 'isolines' object representing isopycnals}
\usage{
isopycnal_isolines(
  salinity,
  temperature,
  ref_pressure = 0,
  ref_longitude = NULL,
  ref_latitude = NULL,
  salinity_type = c("practical", "absolute"),
  temperature_type = c("in-situ", "conservative"),
  trim_freezing = TRUE,
  breaks = pretty,
  n_breaks = 5,
  n_sal = 200,
  n_temp = 200,
  eos = getOption("oceEOS", default = "gsw")
)
}
\arguments{
\item{salinity, salinity_type}{A salinity value. Use
\code{salinity_type = "absolute"} to specify that \code{salinity} values
are absolute salinities.}

\item{temperature, temperature_type}{A temperature value. Use
\code{temperature_type = "conservative"}
to specify that these values are not in-situ temperature.}

\item{ref_pressure}{The pressure that should be used to calculate
density contours in dbar.}

\item{ref_longitude, ref_latitude}{The latitude and longitude that should
be used in seawater calculations if \code{eos} is "gsw".}

\item{trim_freezing}{Don't draw contours outside the freezing region.}

\item{breaks}{A numeric vector or function used to generate breaks
from objects.}

\item{n_breaks}{Passed to \code{breaks} if \code{breaks} is a function.}

\item{n_sal}{Number of points with which contours should be approximated
on the salinity axis.}

\item{n_temp}{Number of points with which contours should be approximated
on the temperature axis.}

\item{eos}{The equation of state: one of "unesco" or "gsw". See
\code{\link[oce:swRho]{oce::swRho()}} for details.}
}
\value{
An object returned by \code{\link[isoband:isobands]{isoband::isolines()}}. The \code{x} values
of the output refer to \code{salinity} and the \code{y} values of the output
refer to temperature.
}
\description{
Generate an 'isolines' object representing isopycnals
}
\examples{
data(ctd, package = "oce")
isolines <- isopycnal_isolines(ctd[["salinity"]], ctd[["temperature"]])

plot(ctd[["salinity"]], ctd[["temperature"]])
for (line in isolines) {
  lines(line)
}

}
